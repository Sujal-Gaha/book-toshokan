// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator zod {
  provider                         = "npx zod-prisma-types"
  output                           = "../../contract/src/generated"
  useMultipleFiles                 = false
  writeBarrelFiles                 = false
  createInputTypes                 = false
  addInputTypeValidation           = false
  addIncludeType                   = false
  addSelectType                    = false
  validateWhereUniqueInput         = true
  createOptionalDefaultValuesTypes = false
  createRelationValuesTypes        = false
  createPartialTypes               = false
  useDefaultValidators             = false
  coerceDate                       = true
  writeNullishInModelTypes         = false
}

enum UserRoleEnum {
  ADMIN
  USER
}

model User {
  id              String                 @id @default(cuid())
  email           String                 @unique
  image           String?
  role            UserRoleEnum           @default(USER)
  feedback        Feedback[]
  subscriptions   UserBookSubscription[]
  FeedbackComment FeedbackComment[]
  name            String
  emailVerified   Boolean
  createdAt       DateTime
  updatedAt       DateTime
  sessions        Session[]
  accounts        Account[]

  @@map("user")
}

model Author {
  id          String @id @default(cuid())
  name        String
  description String
  books       Book[]
}

model Category {
  id          String @id @default(cuid())
  name        String @unique
  description String
  books       Book[]
}

enum ReadStatusEnum {
  TO_READ
  READ
  CURRENTLY_READING
}

model Book {
  id            String                 @id @default(cuid())
  authorId      String
  categoryId    String
  readStatus    ReadStatusEnum?
  name          String                 @unique
  description   String
  image         String
  subImages     String[]               @default([])
  pages         Int
  publishedOn   DateTime
  author        Author                 @relation(fields: [authorId], references: [id])
  category      Category               @relation(fields: [categoryId], references: [id])
  feedback      Feedback?
  subscriptions UserBookSubscription[]
}

model Feedback {
  id            String            @id @default(cuid())
  userId        String
  bookId        String            @unique
  averageRating Float
  totalRatings  Int
  comment       String
  user          User              @relation(fields: [userId], references: [id])
  book          Book              @relation(fields: [bookId], references: [id])
  comments      FeedbackComment[]
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
}

model FeedbackComment {
  id         String   @id @default(cuid())
  feedbackId String
  userId     String
  comment    String
  feedback   Feedback @relation(fields: [feedbackId], references: [id])
  user       User     @relation(fields: [userId], references: [id])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model UserBookSubscription {
  id         String         @id @default(cuid())
  userId     String
  bookId     String
  readStatus ReadStatusEnum
  user       User           @relation(fields: [userId], references: [id])
  book       Book           @relation(fields: [bookId], references: [id])
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}
